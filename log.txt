
General outline:
    3 or 4 stage pipelined processor
    Forwarding
    Latex report

    Split Memory

Dag 1:
    Done:
        Git
        Project Setup (IntelliJ SBT)
        Pipeline stage 1: Fetching (IF stage)
        Test Pipeline stage 1: Fetching (IF stage)
    Questions:
        PC as reg? Mem delay 1 cycle
            fixed
        How is instr mem filled?
                Serial port, vec in scala or bootloader
Dag 2:
    Husk
        Vi ignorerer begge de to første bits på jump imm fordi vi kun skal jumpe mindst 4 byte ad gangen
    Done
        ID Stage
        ID Stage testing

    Questions:
        What is the alternative to the control signals in the book? Answer: Nothing
        In the figure 4.49, what are the ALU control inputs actually here?
        
Dag 3:
    Husk:
        Flyt ALUcontrol ting til IDStage? yes we did that

        2. aluOpSelect created in ID-stage (as this needs logic)
        	1. Based on funct3 and funct7

        3. SPLIT ALU AND BRANCH
            1. LATER MAYBE MERGE

        We now use enums to decide the ALU operation

Dag 4:
    Done:
        EXStage
        Næsten MEMStage (mangler memSize som er relateret til spørgsmålet nedenunder)

    Husk:
        Lav controlsignaler til at bestemme om det er 1,2 eller 4 byte der skal skrives/læses fra memor

        Det burde være muligt for os at bestemme os for at branche allerede i ID

        Bundles, bundles, bundles! Please implement bundles.

        Clean up the GIT -

    Questions:
        If our memory is in byte elements then it would take 4 clockcycles to read a word? Does this mean we
        need the memory to be made of word-elements or are we missing something?
Dag 5:
    Hvad skal vi arbejde på:
DONE    0.5: Synthesize vores ting der virker på fpga board.
            a: Problems:
                1. Storing instructions in memory.
                2. Reading registers.
            b:  Chosen Solution:
                1.  Hardcode the instructions (disgusting, but needed)
                2.  Use the LEDS (only 16, so some regs we cant show)
DONE    0.75: Flyt alt branch stuff til ID stage (det er free (optimize da vi skal flushe mindre stages)).
DONE    1. Test om branch virker -> det virker ikke -> fix det (nok med flush ting).
        2. Bootloader eller serial port til at skrive programmer ind.
        3. Control signals til at styre om mem skal arbejde i bytes, halfwords eller words.
        4. Forwarding?
DONE    5. Bundles Bundles Bundles???

Dag 6:
     Hvad skal vi arbejde på:
DONE    1. Lav en memory test hvor det hele virker
DONE    2. Control signals til at styre om mem skal arbejde i bytes, halfwords eller words.
DONE    3. test mem again
        4. LED Blink test
            a) Questions:
                Using syncReadMem;
                1. Which memory address should we sw?
                2. What should be saved at this address?
                3. How do we connect the memory address to the LED?

            b) Idea
                1. Store value in a single register
                2. change / manipulate mem stage to get to work?
                3. Or simply read from register file
                4. Then we are not using sw?
        5. UART
        6. Forwarding?
        7. Bootloader eller serial port til at skrive programmer ind.

Dag 7:
    Hvad skal vi arbejde på:
DONE    1. Blinking LED
        2. UART
IP      3. Forwarding
            Hvor skal vi bruge forwarding?
                Post EX/MEM til post ID/EX
                Post EX/MEM aluResult  til branchCheck i ID
                Pre EX/MEM aluResult til branchCheck i ID

            Vi laver et dedikeret forwarding unit modul.
                Fordi den skal lave logic operations selv på rd fra de forskellige steder

Dag 8:
    Hvad skal vi arbejde på:
DONE    1. Forwarding
DONE    2. IO "memory" for blinking LED
            Updated code:
                 ## Load value 133333333 into x1
                 lui x1 0x4f00
                 add x3 x0 x1
                 ## Start iterative process
                 cntdown:
                     addi x1 x1 -1
                     bne x1 x0 cntdown
                     addi x2 x0 1
                     sw x2 1024(x0)
                 cntup:
                     addi x1 x1 1
                     bne x1 x3 cntup
                     addi x2 x0 0
                     sw x2 1024(x0)
                     beq x0 x0 cntdown
IP      3. Test alle resterende instruktioner
        4. UART

Dag 9:
    Hvad skal vi arbejde på?:
DONE    1. Test alle resterende instruktioner der mangler det(alt ud over ecall)
        2. Status fremlæggelse
        3. UART

Dag 10:
    Hvad skal vi arbejde på:
IP      1. UART
            Plan:
            Det eneste vi skal er at bruge metoderne i requestport til at skrive til topPort
            og så forbinde tx og rx i xdc og så virker det bare.
            Der kan kun sendes og modtages i bytes så vi skal skrive noget der kan samle 4 bytes til en instruction.
            Adressen man reader og writer til er 0 for read/write og 0x04 for read af uart status.

            Bare følg StringStreamer som et eksempel på et modul der skriver TIL uart.

            Vores SerialPort sender nu en instr og instrValid output som toplevel modtager og connecter til sit instr
            wrData og wrEna henholdsvis.

            For at skrive til vores processor fra vores computer skal vi bruge en metode der hedder 'open' i C.
            Den vil så skrive til den COM port man specificerer. Det er her vi skal sende vores instruktioner.

               Plan for C-program.
                1. Lav C-program, der outputter en .bat fil (fil der består af windows commands)
                2. Commands skal være følgende:
                    "mode COM10 BAUD=9600 PARITY=n DATA=8" // Her indstilles vores com port. DATA=8 = 8 bits.
                    "set /p x="hello" <nul >\\.\COM10" // Her sendes en besked til COM10

    Plan for imorgen
        Georg:
            Forbind toplevel og IFModule tingene til at læse instruktions fra UART
            Lav den del af SerialPort til write
                Kræver også at man implementerer ecall.




