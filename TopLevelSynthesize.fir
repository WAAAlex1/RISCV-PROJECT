circuit TopLevelSynthesize :
  module Tx :
    input clock : Clock
    input reset : Reset
    output io : { txd : UInt<1>, flip channel : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}}

    reg shiftReg : UInt, clock with :
      reset => (reset, UInt<11>("h7ff")) @[Uart.scala 30:25]
    reg cntReg : UInt<20>, clock with :
      reset => (reset, UInt<20>("h0")) @[Uart.scala 31:23]
    reg bitsReg : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Uart.scala 32:24]
    node _io_channel_ready_T = eq(cntReg, UInt<1>("h0")) @[Uart.scala 34:31]
    node _io_channel_ready_T_1 = eq(bitsReg, UInt<1>("h0")) @[Uart.scala 34:52]
    node _io_channel_ready_T_2 = and(_io_channel_ready_T, _io_channel_ready_T_1) @[Uart.scala 34:40]
    io.channel.ready <= _io_channel_ready_T_2 @[Uart.scala 34:20]
    node _io_txd_T = bits(shiftReg, 0, 0) @[Uart.scala 35:21]
    io.txd <= _io_txd_T @[Uart.scala 35:10]
    node _T = eq(cntReg, UInt<1>("h0")) @[Uart.scala 37:15]
    when _T : @[Uart.scala 37:24]
      cntReg <= UInt<13>("h1869") @[Uart.scala 39:12]
      node _T_1 = neq(bitsReg, UInt<1>("h0")) @[Uart.scala 40:18]
      when _T_1 : @[Uart.scala 40:27]
        node shift = shr(shiftReg, 1) @[Uart.scala 41:28]
        node _shiftReg_T = bits(shift, 9, 0) @[Uart.scala 42:33]
        node _shiftReg_T_1 = cat(UInt<1>("h1"), _shiftReg_T) @[Cat.scala 33:92]
        shiftReg <= _shiftReg_T_1 @[Uart.scala 42:16]
        node _bitsReg_T = sub(bitsReg, UInt<1>("h1")) @[Uart.scala 43:26]
        node _bitsReg_T_1 = tail(_bitsReg_T, 1) @[Uart.scala 43:26]
        bitsReg <= _bitsReg_T_1 @[Uart.scala 43:15]
      else :
        when io.channel.valid : @[Uart.scala 45:30]
          node _shiftReg_T_2 = cat(UInt<2>("h3"), io.channel.bits) @[Cat.scala 33:92]
          node _shiftReg_T_3 = cat(_shiftReg_T_2, UInt<1>("h0")) @[Cat.scala 33:92]
          shiftReg <= _shiftReg_T_3 @[Uart.scala 46:18]
          bitsReg <= UInt<4>("hb") @[Uart.scala 47:17]
        else :
          shiftReg <= UInt<11>("h7ff") @[Uart.scala 49:18]
    else :
      node _cntReg_T = sub(cntReg, UInt<1>("h1")) @[Uart.scala 54:22]
      node _cntReg_T_1 = tail(_cntReg_T, 1) @[Uart.scala 54:22]
      cntReg <= _cntReg_T_1 @[Uart.scala 54:12]


  module Rx :
    input clock : Clock
    input reset : Reset
    output io : { flip rxd : UInt<1>, channel : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}}

    reg rxReg_REG : UInt, clock with :
      reset => (reset, UInt<1>("h1")) @[Uart.scala 76:30]
    rxReg_REG <= io.rxd @[Uart.scala 76:30]
    reg rxReg : UInt, clock with :
      reset => (reset, UInt<1>("h1")) @[Uart.scala 76:22]
    rxReg <= rxReg_REG @[Uart.scala 76:22]
    reg shiftReg : UInt<8>, clock with :
      reset => (reset, UInt<8>("h0")) @[Uart.scala 78:25]
    reg cntReg : UInt<20>, clock with :
      reset => (reset, UInt<20>("h0")) @[Uart.scala 79:23]
    reg bitsReg : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Uart.scala 80:24]
    reg valReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Uart.scala 81:23]
    node _T = neq(cntReg, UInt<1>("h0")) @[Uart.scala 83:15]
    when _T : @[Uart.scala 83:24]
      node _cntReg_T = sub(cntReg, UInt<1>("h1")) @[Uart.scala 84:22]
      node _cntReg_T_1 = tail(_cntReg_T, 1) @[Uart.scala 84:22]
      cntReg <= _cntReg_T_1 @[Uart.scala 84:12]
    else :
      node _T_1 = neq(bitsReg, UInt<1>("h0")) @[Uart.scala 85:22]
      when _T_1 : @[Uart.scala 85:31]
        cntReg <= UInt<13>("h1869") @[Uart.scala 86:12]
        node _shiftReg_T = shr(shiftReg, 1) @[Uart.scala 87:37]
        node _shiftReg_T_1 = cat(rxReg, _shiftReg_T) @[Cat.scala 33:92]
        shiftReg <= _shiftReg_T_1 @[Uart.scala 87:14]
        node _bitsReg_T = sub(bitsReg, UInt<1>("h1")) @[Uart.scala 88:24]
        node _bitsReg_T_1 = tail(_bitsReg_T, 1) @[Uart.scala 88:24]
        bitsReg <= _bitsReg_T_1 @[Uart.scala 88:13]
        node _T_2 = eq(bitsReg, UInt<1>("h1")) @[Uart.scala 90:18]
        when _T_2 : @[Uart.scala 90:27]
          valReg <= UInt<1>("h1") @[Uart.scala 91:14]
      else :
        node _T_3 = eq(rxReg, UInt<1>("h0")) @[Uart.scala 93:20]
        when _T_3 : @[Uart.scala 93:29]
          cntReg <= UInt<14>("h249e") @[Uart.scala 94:12]
          bitsReg <= UInt<4>("h8") @[Uart.scala 95:13]
    node _T_4 = and(valReg, io.channel.ready) @[Uart.scala 98:15]
    when _T_4 : @[Uart.scala 98:36]
      valReg <= UInt<1>("h0") @[Uart.scala 99:12]
    io.channel.bits <= shiftReg @[Uart.scala 102:19]
    io.channel.valid <= valReg @[Uart.scala 103:20]

  module Queue :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, count : UInt<5>}

    cmem ram : UInt<8> [16] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<4>("hf")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<4>("hf")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<5>("h10"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module Queue_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip enq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, deq : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<8>}, count : UInt<5>}

    cmem ram : UInt<8> [16] @[Decoupled.scala 273:95]
    reg enq_ptr_value : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Counter.scala 61:40]
    reg deq_ptr_value : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Counter.scala 61:40]
    reg maybe_full : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Decoupled.scala 276:27]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 277:33]
    node _empty_T = eq(maybe_full, UInt<1>("h0")) @[Decoupled.scala 278:28]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 278:25]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 279:24]
    node _do_enq_T = and(io.enq.ready, io.enq.valid) @[Decoupled.scala 51:35]
    wire do_enq : UInt<1> @[Decoupled.scala 280:27]
    do_enq <= _do_enq_T @[Decoupled.scala 280:27]
    node _do_deq_T = and(io.deq.ready, io.deq.valid) @[Decoupled.scala 51:35]
    wire do_deq : UInt<1> @[Decoupled.scala 281:27]
    do_deq <= _do_deq_T @[Decoupled.scala 281:27]
    when do_enq : @[Decoupled.scala 286:16]
      infer mport MPORT = ram[enq_ptr_value], clock @[Decoupled.scala 287:8]
      MPORT <= io.enq.bits @[Decoupled.scala 287:24]
      node wrap = eq(enq_ptr_value, UInt<4>("hf")) @[Counter.scala 73:24]
      node _value_T = add(enq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_1 = tail(_value_T, 1) @[Counter.scala 77:24]
      enq_ptr_value <= _value_T_1 @[Counter.scala 77:15]
    when do_deq : @[Decoupled.scala 290:16]
      node wrap_1 = eq(deq_ptr_value, UInt<4>("hf")) @[Counter.scala 73:24]
      node _value_T_2 = add(deq_ptr_value, UInt<1>("h1")) @[Counter.scala 77:24]
      node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 77:24]
      deq_ptr_value <= _value_T_3 @[Counter.scala 77:15]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 293:15]
    when _T : @[Decoupled.scala 293:27]
      maybe_full <= do_enq @[Decoupled.scala 294:16]
    when UInt<1>("h0") : @[Decoupled.scala 296:15]
      enq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      deq_ptr_value <= UInt<1>("h0") @[Counter.scala 98:11]
      maybe_full <= UInt<1>("h0") @[Decoupled.scala 299:16]
    node _io_deq_valid_T = eq(empty, UInt<1>("h0")) @[Decoupled.scala 302:19]
    io.deq.valid <= _io_deq_valid_T @[Decoupled.scala 302:16]
    node _io_enq_ready_T = eq(full, UInt<1>("h0")) @[Decoupled.scala 303:19]
    io.enq.ready <= _io_enq_ready_T @[Decoupled.scala 303:16]
    infer mport io_deq_bits_MPORT = ram[deq_ptr_value], clock @[Decoupled.scala 310:23]
    io.deq.bits <= io_deq_bits_MPORT @[Decoupled.scala 310:17]
    node _ptr_diff_T = sub(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 326:32]
    node ptr_diff = tail(_ptr_diff_T, 1) @[Decoupled.scala 326:32]
    node _io_count_T = and(maybe_full, ptr_match) @[Decoupled.scala 329:32]
    node _io_count_T_1 = mux(_io_count_T, UInt<5>("h10"), UInt<1>("h0")) @[Decoupled.scala 329:20]
    node _io_count_T_2 = or(_io_count_T_1, ptr_diff) @[Decoupled.scala 329:62]
    io.count <= _io_count_T_2 @[Decoupled.scala 329:14]

  module MemoryMappedUart :
    input clock : Clock
    input reset : Reset
    output io : { flip port : { read : UInt<1>, write : UInt<1>, addr : UInt<32>, wrData : UInt<32>, flip rdData : UInt<32>}, pins : { tx : UInt<1>, flip rx : UInt<1>}}

    inst transmitter of Tx @[MemoryMappedUart.scala 58:27]
    transmitter.clock <= clock
    transmitter.reset <= reset
    inst receiver of Rx @[MemoryMappedUart.scala 59:24]
    receiver.clock <= clock
    receiver.reset <= reset
    inst txBuffer of Queue @[MemoryMappedUart.scala 62:24]
    txBuffer.clock <= clock
    txBuffer.reset <= reset
    inst rxBuffer of Queue_1 @[MemoryMappedUart.scala 63:24]
    rxBuffer.clock <= clock
    rxBuffer.reset <= reset
    transmitter.io.channel <= txBuffer.io.deq @[MemoryMappedUart.scala 66:19]
    rxBuffer.io.enq <= receiver.io.channel @[MemoryMappedUart.scala 67:23]
    node _hadDataReadRequest_T = eq(io.port.addr, UInt<1>("h0")) @[Bus.scala 81:30]
    node _hadDataReadRequest_T_1 = and(io.port.read, _hadDataReadRequest_T) @[Bus.scala 81:17]
    reg hadDataReadRequest : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[MemoryMappedUart.scala 71:12]
    hadDataReadRequest <= _hadDataReadRequest_T_1 @[MemoryMappedUart.scala 71:12]
    txBuffer.io.enq.bits <= io.port.wrData @[MemoryMappedUart.scala 77:24]
    node _txBuffer_io_enq_valid_T = eq(io.port.addr, UInt<1>("h0")) @[Bus.scala 74:31]
    node _txBuffer_io_enq_valid_T_1 = and(io.port.write, _txBuffer_io_enq_valid_T) @[Bus.scala 74:18]
    txBuffer.io.enq.valid <= _txBuffer_io_enq_valid_T_1 @[MemoryMappedUart.scala 78:25]
    rxBuffer.io.deq.ready <= hadDataReadRequest @[MemoryMappedUart.scala 81:25]
    io.pins.tx <= transmitter.io.txd @[MemoryMappedUart.scala 84:14]
    receiver.io.rxd <= io.pins.rx @[MemoryMappedUart.scala 85:19]
    node _io_port_rdData_T = cat(rxBuffer.io.deq.valid, txBuffer.io.enq.ready) @[MemoryMappedUart.scala 91:27]
    node _io_port_rdData_T_1 = mux(hadDataReadRequest, rxBuffer.io.deq.bits, _io_port_rdData_T) @[MemoryMappedUart.scala 88:24]
    io.port.rdData <= _io_port_rdData_T_1 @[MemoryMappedUart.scala 88:18]

  module IFModuleTest :
    input clock : Clock
    input reset : Reset
    output io : { flip pcSrc : UInt<1>, flip branchAddr : UInt<32>, instruction : UInt<32>, pc : UInt<32>, flip running : UInt<1>}

    reg pc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[IFModuleTest.scala 17:19]
    wire hardCodeInstr : UInt<32>[30] @[IFModuleTest.scala 21:27]
    hardCodeInstr[0] <= UInt<21>("h100193") @[IFModuleTest.scala 23:20]
    hardCodeInstr[1] <= UInt<9>("h113") @[IFModuleTest.scala 24:20]
    hardCodeInstr[2] <= UInt<23>("h500293") @[IFModuleTest.scala 25:20]
    hardCodeInstr[3] <= UInt<25>("h1f00f93") @[IFModuleTest.scala 26:20]
    hardCodeInstr[4] <= UInt<21>("h100f13") @[IFModuleTest.scala 27:20]
    hardCodeInstr[5] <= UInt<13>("h1eb7") @[IFModuleTest.scala 28:20]
    hardCodeInstr[6] <= UInt<24>("hc0006f") @[IFModuleTest.scala 29:20]
    hardCodeInstr[7] <= UInt<24>("ha00893") @[IFModuleTest.scala 31:20]
    hardCodeInstr[8] <= UInt<7>("h73") @[IFModuleTest.scala 32:20]
    hardCodeInstr[9] <= UInt<22>("h218133") @[IFModuleTest.scala 34:20]
    hardCodeInstr[10] <= UInt<25>("h18003ef") @[IFModuleTest.scala 35:21]
    hardCodeInstr[11] <= UInt<22>("h3101b3") @[IFModuleTest.scala 36:21]
    hardCodeInstr[12] <= UInt<26>("h28003ef") @[IFModuleTest.scala 37:21]
    hardCodeInstr[13] <= UInt<21>("h120213") @[IFModuleTest.scala 38:21]
    hardCodeInstr[14] <= UInt<32>("hfe5216e3") @[IFModuleTest.scala 39:21]
    hardCodeInstr[15] <= UInt<26>("h340006f") @[IFModuleTest.scala 40:21]
    hardCodeInstr[16] <= UInt<22>("h2eae03") @[IFModuleTest.scala 42:21]
    hardCodeInstr[17] <= UInt<25>("h1fe1e13") @[IFModuleTest.scala 43:21]
    hardCodeInstr[18] <= UInt<25>("h1fe5e13") @[IFModuleTest.scala 44:21]
    hardCodeInstr[19] <= UInt<32>("hffee1ae3") @[IFModuleTest.scala 45:21]
    hardCodeInstr[20] <= UInt<22>("h2ea0a3") @[IFModuleTest.scala 46:21]
    hardCodeInstr[21] <= UInt<18>("h38067") @[IFModuleTest.scala 47:21]
    hardCodeInstr[22] <= UInt<22>("h2eae03") @[IFModuleTest.scala 49:21]
    hardCodeInstr[23] <= UInt<25>("h1fe1e13") @[IFModuleTest.scala 50:21]
    hardCodeInstr[24] <= UInt<25>("h1fe5e13") @[IFModuleTest.scala 51:21]
    hardCodeInstr[25] <= UInt<32>("hffee1ae3") @[IFModuleTest.scala 52:21]
    hardCodeInstr[26] <= UInt<22>("h3ea0a3") @[IFModuleTest.scala 53:21]
    hardCodeInstr[27] <= UInt<18>("h38067") @[IFModuleTest.scala 54:21]
    hardCodeInstr[28] <= UInt<22>("h3ea023") @[IFModuleTest.scala 56:21]
    hardCodeInstr[29] <= UInt<32>("hfa9ff06f") @[IFModuleTest.scala 57:21]
    wire pcAdded : UInt<32> @[IFModuleTest.scala 77:28]
    pcAdded <= UInt<32>("h0") @[IFModuleTest.scala 77:28]
    node _pcAdded_T = add(pc, UInt<1>("h1")) @[IFModuleTest.scala 78:32]
    node _pcAdded_T_1 = tail(_pcAdded_T, 1) @[IFModuleTest.scala 78:32]
    node _pcAdded_T_2 = mux(io.running, _pcAdded_T_1, pc) @[IFModuleTest.scala 78:17]
    pcAdded <= _pcAdded_T_2 @[IFModuleTest.scala 78:11]
    wire pcMux : UInt<32> @[IFModuleTest.scala 81:26]
    pcMux <= UInt<32>("h0") @[IFModuleTest.scala 81:26]
    node _pcMux_T = shr(io.branchAddr, 2) @[IFModuleTest.scala 82:40]
    node _pcMux_T_1 = mux(io.pcSrc, _pcMux_T, pcAdded) @[IFModuleTest.scala 82:15]
    pcMux <= _pcMux_T_1 @[IFModuleTest.scala 82:9]
    pc <= pcMux @[IFModuleTest.scala 83:6]
    node _io_instruction_T = bits(pc, 4, 0)
    node _io_instruction_T_1 = mux(io.pcSrc, UInt<5>("h13"), hardCodeInstr[_io_instruction_T]) @[IFModuleTest.scala 86:39]
    node _io_instruction_T_2 = mux(io.running, _io_instruction_T_1, UInt<5>("h13")) @[IFModuleTest.scala 86:24]
    io.instruction <= _io_instruction_T_2 @[IFModuleTest.scala 86:18]
    node _io_pc_T = shl(pc, 2) @[IFModuleTest.scala 90:15]
    io.pc <= _io_pc_T @[IFModuleTest.scala 90:9]

  module IDModule :
    input clock : Clock
    input reset : Reset
    output io : { flip pcIn : UInt<32>, flip writeRegIdx : UInt<5>, flip regWriteIn : UInt<1>, flip writeRegData : SInt<32>, flip instr : UInt<32>, rs1data : SInt<32>, rs2data : SInt<32>, pcOut : UInt<32>, rd : UInt<5>, imm : SInt<32>, branchAddr : UInt<32>, pcSrc : UInt<1>, halt : UInt<1>, flip resEX : SInt<32>, flip resMEM : SInt<32>, flip forward1 : UInt<2>, flip forward2 : UInt<2>, flip ecallForward : UInt<2>, flip ldBraHazard : UInt<1>, exControl : { sigBundle : { memWrite : UInt<1>, regWrite : UInt<1>, memToReg : UInt<1>, memSize : UInt<3>}, aluSRC : UInt<1>, aluOpSelect : UInt<4>, rs1Idx : UInt<5>, rs2Idx : UInt<5>}, aluControl : UInt<4>, aluOPType : UInt<2>, regFile : SInt<32>[32]}

    reg pcIn : UInt, clock with :
      reset => (UInt<1>("h0"), pcIn) @[IDModule.scala 52:21]
    pcIn <= io.pcIn @[IDModule.scala 52:21]
    reg instr : UInt, clock with :
      reset => (UInt<1>("h0"), instr) @[IDModule.scala 53:22]
    instr <= io.instr @[IDModule.scala 53:22]
    wire _registerFile_WIRE : SInt<32>[32] @[IDModule.scala 56:37]
    _registerFile_WIRE[0] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[1] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[2] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[3] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[4] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[5] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[6] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[7] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[8] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[9] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[10] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[11] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[12] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[13] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[14] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[15] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[16] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[17] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[18] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[19] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[20] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[21] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[22] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[23] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[24] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[25] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[26] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[27] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[28] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[29] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[30] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    _registerFile_WIRE[31] <= asSInt(UInt<32>("h0")) @[IDModule.scala 56:37]
    reg registerFile : SInt<32>[32], clock with :
      reset => (reset, _registerFile_WIRE) @[IDModule.scala 56:29]
    node _rs1data_T = bits(io.forward1, 0, 0) @[IDModule.scala 57:32]
    node _rs1data_T_1 = bits(io.forward1, 1, 1) @[IDModule.scala 57:60]
    node _rs1data_T_2 = bits(instr, 19, 15) @[IDModule.scala 57:92]
    node _rs1data_T_3 = mux(_rs1data_T_1, io.resMEM, registerFile[_rs1data_T_2]) @[IDModule.scala 57:48]
    node rs1data = mux(_rs1data_T, io.resEX, _rs1data_T_3) @[IDModule.scala 57:20]
    wire rs2data : SInt<32> @[IDModule.scala 58:28]
    rs2data <= asSInt(UInt<32>("h0")) @[IDModule.scala 58:28]
    node _rs2data_T = bits(io.forward2, 0, 0) @[IDModule.scala 59:29]
    node _rs2data_T_1 = bits(io.forward2, 1, 1) @[IDModule.scala 59:57]
    node _rs2data_T_2 = bits(instr, 24, 20) @[IDModule.scala 59:89]
    node _rs2data_T_3 = mux(_rs2data_T_1, io.resMEM, registerFile[_rs2data_T_2]) @[IDModule.scala 59:45]
    node _rs2data_T_4 = mux(_rs2data_T, io.resEX, _rs2data_T_3) @[IDModule.scala 59:17]
    rs2data <= _rs2data_T_4 @[IDModule.scala 59:11]
    node _io_exControl_rs1Idx_T = bits(instr, 19, 15) @[IDModule.scala 60:31]
    io.exControl.rs1Idx <= _io_exControl_rs1Idx_T @[IDModule.scala 60:23]
    node _io_exControl_rs2Idx_T = bits(instr, 24, 20) @[IDModule.scala 61:31]
    io.exControl.rs2Idx <= _io_exControl_rs2Idx_T @[IDModule.scala 61:23]
    wire branchCheck : UInt<1> @[IDModule.scala 64:32]
    branchCheck <= UInt<1>("h0") @[IDModule.scala 64:32]
    node _T = bits(instr, 14, 12) @[IDModule.scala 65:15]
    node _T_1 = eq(UInt<1>("h0"), _T) @[IDModule.scala 66:3]
    when _T_1 : @[IDModule.scala 66:3]
      node _branchCheck_T = eq(rs1data, rs2data) @[IDModule.scala 68:31]
      branchCheck <= _branchCheck_T @[IDModule.scala 68:19]
    else :
      node _T_2 = eq(UInt<1>("h1"), _T) @[IDModule.scala 66:3]
      when _T_2 : @[IDModule.scala 66:3]
        node _branchCheck_T_1 = neq(rs1data, rs2data) @[IDModule.scala 71:31]
        branchCheck <= _branchCheck_T_1 @[IDModule.scala 71:19]
      else :
        node _T_3 = eq(UInt<3>("h4"), _T) @[IDModule.scala 66:3]
        when _T_3 : @[IDModule.scala 66:3]
          node _branchCheck_T_2 = lt(rs1data, rs2data) @[IDModule.scala 74:31]
          branchCheck <= _branchCheck_T_2 @[IDModule.scala 74:19]
        else :
          node _T_4 = eq(UInt<3>("h5"), _T) @[IDModule.scala 66:3]
          when _T_4 : @[IDModule.scala 66:3]
            node _branchCheck_T_3 = geq(rs1data, rs2data) @[IDModule.scala 77:31]
            branchCheck <= _branchCheck_T_3 @[IDModule.scala 77:19]
          else :
            node _T_5 = eq(UInt<3>("h6"), _T) @[IDModule.scala 66:3]
            when _T_5 : @[IDModule.scala 66:3]
              node _branchCheck_T_4 = asUInt(rs1data) @[IDModule.scala 80:31]
              node _branchCheck_T_5 = asUInt(rs2data) @[IDModule.scala 80:48]
              node _branchCheck_T_6 = lt(_branchCheck_T_4, _branchCheck_T_5) @[IDModule.scala 80:38]
              branchCheck <= _branchCheck_T_6 @[IDModule.scala 80:19]
            else :
              node _T_6 = eq(UInt<3>("h7"), _T) @[IDModule.scala 66:3]
              when _T_6 : @[IDModule.scala 66:3]
                node _branchCheck_T_7 = asUInt(rs1data) @[IDModule.scala 83:31]
                node _branchCheck_T_8 = asUInt(rs2data) @[IDModule.scala 83:49]
                node _branchCheck_T_9 = geq(_branchCheck_T_7, _branchCheck_T_8) @[IDModule.scala 83:38]
                branchCheck <= _branchCheck_T_9 @[IDModule.scala 83:19]
    wire branch : UInt<1> @[IDModule.scala 89:27]
    branch <= UInt<1>("h0") @[IDModule.scala 89:27]
    wire pcSelect : UInt<1> @[IDModule.scala 90:29]
    pcSelect <= UInt<1>("h0") @[IDModule.scala 90:29]
    io.exControl.aluSRC <= UInt<1>("h0") @[IDModule.scala 91:23]
    io.exControl.sigBundle.memWrite <= UInt<1>("h0") @[IDModule.scala 92:35]
    io.exControl.sigBundle.regWrite <= UInt<1>("h1") @[IDModule.scala 93:35]
    io.exControl.sigBundle.memToReg <= UInt<1>("h0") @[IDModule.scala 94:35]
    io.exControl.sigBundle.memSize <= UInt<2>("h2") @[IDModule.scala 95:34]
    wire ecall : UInt<1> @[IDModule.scala 96:26]
    ecall <= UInt<1>("h0") @[IDModule.scala 96:26]
    io.aluControl <= UInt<1>("h0") @[IDModule.scala 99:17]
    io.aluOPType <= UInt<1>("h0") @[IDModule.scala 100:16]
    wire aluOPType : UInt<2> @[IDModule.scala 105:30]
    aluOPType <= UInt<2>("h0") @[IDModule.scala 105:30]
    io.imm <= asSInt(UInt<1>("h0")) @[IDModule.scala 112:10]
    node _T_7 = bits(instr, 6, 1) @[IDModule.scala 113:15]
    node _T_8 = eq(UInt<5>("h19"), _T_7) @[IDModule.scala 113:22]
    when _T_8 : @[IDModule.scala 113:22]
      aluOPType <= UInt<1>("h0") @[IDModule.scala 115:17]
      io.exControl.aluSRC <= UInt<1>("h0") @[IDModule.scala 118:27]
      branch <= UInt<1>("h0") @[IDModule.scala 119:14]
      io.exControl.sigBundle.memWrite <= UInt<1>("h0") @[IDModule.scala 120:39]
      io.exControl.sigBundle.regWrite <= UInt<1>("h1") @[IDModule.scala 121:39]
      io.exControl.sigBundle.memToReg <= UInt<1>("h0") @[IDModule.scala 122:39]
    else :
      node _T_9 = eq(UInt<4>("h9"), _T_7) @[IDModule.scala 113:22]
      when _T_9 : @[IDModule.scala 113:22]
        node _io_imm_T = bits(instr, 31, 20) @[IDModule.scala 125:24]
        node _io_imm_T_1 = cat(_io_imm_T, UInt<20>("hfffff")) @[IDModule.scala 125:32]
        node _io_imm_T_2 = asSInt(_io_imm_T_1) @[IDModule.scala 125:47]
        node _io_imm_T_3 = shr(_io_imm_T_2, 20) @[IDModule.scala 125:54]
        io.imm <= _io_imm_T_3 @[IDModule.scala 125:14]
        aluOPType <= UInt<1>("h1") @[IDModule.scala 126:17]
        io.exControl.aluSRC <= UInt<1>("h1") @[IDModule.scala 129:27]
        branch <= UInt<1>("h0") @[IDModule.scala 130:14]
        io.exControl.sigBundle.memWrite <= UInt<1>("h0") @[IDModule.scala 131:39]
        io.exControl.sigBundle.regWrite <= UInt<1>("h1") @[IDModule.scala 132:39]
        io.exControl.sigBundle.memToReg <= UInt<1>("h0") @[IDModule.scala 133:39]
      else :
        node _T_10 = eq(UInt<1>("h1"), _T_7) @[IDModule.scala 113:22]
        when _T_10 : @[IDModule.scala 113:22]
          node _io_imm_T_4 = bits(instr, 31, 20) @[IDModule.scala 136:23]
          node _io_imm_T_5 = cat(_io_imm_T_4, UInt<20>("hfffff")) @[IDModule.scala 136:31]
          node _io_imm_T_6 = asSInt(_io_imm_T_5) @[IDModule.scala 136:46]
          node _io_imm_T_7 = shr(_io_imm_T_6, 20) @[IDModule.scala 136:53]
          io.imm <= _io_imm_T_7 @[IDModule.scala 136:14]
          aluOPType <= UInt<2>("h2") @[IDModule.scala 137:17]
          io.exControl.aluSRC <= UInt<1>("h1") @[IDModule.scala 140:27]
          branch <= UInt<1>("h0") @[IDModule.scala 141:14]
          io.exControl.sigBundle.memWrite <= UInt<1>("h0") @[IDModule.scala 142:39]
          io.exControl.sigBundle.regWrite <= UInt<1>("h1") @[IDModule.scala 143:39]
          io.exControl.sigBundle.memToReg <= UInt<1>("h1") @[IDModule.scala 144:39]
        else :
          node _T_11 = eq(UInt<6>("h39"), _T_7) @[IDModule.scala 113:22]
          when _T_11 : @[IDModule.scala 113:22]
            node _io_imm_T_8 = bits(instr, 31, 20) @[IDModule.scala 148:24]
            node _io_imm_T_9 = cat(_io_imm_T_8, UInt<20>("hfffff")) @[IDModule.scala 148:32]
            node _io_imm_T_10 = asSInt(_io_imm_T_9) @[IDModule.scala 148:48]
            node _io_imm_T_11 = shr(_io_imm_T_10, 20) @[IDModule.scala 148:55]
            io.imm <= _io_imm_T_11 @[IDModule.scala 148:14]
            ecall <= UInt<1>("h1") @[IDModule.scala 149:13]
          else :
            node _T_12 = eq(UInt<6>("h33"), _T_7) @[IDModule.scala 113:22]
            when _T_12 : @[IDModule.scala 113:22]
              node _io_imm_T_12 = bits(instr, 31, 20) @[IDModule.scala 153:24]
              node _io_imm_T_13 = cat(_io_imm_T_12, UInt<20>("hfffff")) @[IDModule.scala 153:32]
              node _io_imm_T_14 = asSInt(_io_imm_T_13) @[IDModule.scala 153:48]
              node _io_imm_T_15 = shr(_io_imm_T_14, 20) @[IDModule.scala 153:55]
              io.imm <= _io_imm_T_15 @[IDModule.scala 153:14]
              pcSelect <= UInt<1>("h1") @[IDModule.scala 154:16]
              branchCheck <= UInt<1>("h1") @[IDModule.scala 155:19]
              branch <= UInt<1>("h1") @[IDModule.scala 156:14]
            else :
              node _T_13 = eq(UInt<5>("h11"), _T_7) @[IDModule.scala 113:22]
              when _T_13 : @[IDModule.scala 113:22]
                node _io_imm_T_16 = bits(instr, 31, 25) @[IDModule.scala 159:24]
                node _io_imm_T_17 = bits(instr, 11, 7) @[IDModule.scala 159:40]
                node _io_imm_T_18 = cat(_io_imm_T_16, _io_imm_T_17) @[IDModule.scala 159:32]
                node _io_imm_T_19 = cat(_io_imm_T_18, UInt<20>("hfffff")) @[IDModule.scala 159:47]
                node _io_imm_T_20 = asSInt(_io_imm_T_19) @[IDModule.scala 159:63]
                node _io_imm_T_21 = shr(_io_imm_T_20, 20) @[IDModule.scala 159:70]
                io.imm <= _io_imm_T_21 @[IDModule.scala 159:14]
                aluOPType <= UInt<2>("h2") @[IDModule.scala 160:17]
                io.exControl.aluSRC <= UInt<1>("h1") @[IDModule.scala 163:27]
                branch <= UInt<1>("h0") @[IDModule.scala 164:14]
                io.exControl.sigBundle.memWrite <= UInt<1>("h1") @[IDModule.scala 165:39]
                io.exControl.sigBundle.regWrite <= UInt<1>("h0") @[IDModule.scala 166:39]
                io.exControl.sigBundle.memToReg <= UInt<1>("h0") @[IDModule.scala 167:39]
              else :
                node _T_14 = eq(UInt<6>("h31"), _T_7) @[IDModule.scala 113:22]
                when _T_14 : @[IDModule.scala 113:22]
                  node _io_imm_T_22 = bits(instr, 31, 31) @[IDModule.scala 170:24]
                  node _io_imm_T_23 = bits(instr, 7, 7) @[IDModule.scala 170:37]
                  node _io_imm_T_24 = cat(_io_imm_T_22, _io_imm_T_23) @[IDModule.scala 170:29]
                  node _io_imm_T_25 = bits(instr, 30, 25) @[IDModule.scala 170:49]
                  node _io_imm_T_26 = cat(_io_imm_T_24, _io_imm_T_25) @[IDModule.scala 170:41]
                  node _io_imm_T_27 = bits(instr, 11, 8) @[IDModule.scala 170:65]
                  node _io_imm_T_28 = cat(_io_imm_T_26, _io_imm_T_27) @[IDModule.scala 170:57]
                  node _io_imm_T_29 = cat(_io_imm_T_28, UInt<20>("hfffff")) @[IDModule.scala 170:72]
                  node _io_imm_T_30 = asSInt(_io_imm_T_29) @[IDModule.scala 170:88]
                  node _io_imm_T_31 = shr(_io_imm_T_30, 19) @[IDModule.scala 170:95]
                  io.imm <= _io_imm_T_31 @[IDModule.scala 170:14]
                  io.exControl.aluSRC <= UInt<1>("h0") @[IDModule.scala 173:27]
                  branch <= UInt<1>("h1") @[IDModule.scala 174:14]
                  io.exControl.sigBundle.memWrite <= UInt<1>("h0") @[IDModule.scala 175:39]
                  io.exControl.sigBundle.regWrite <= UInt<1>("h0") @[IDModule.scala 176:39]
                  io.exControl.sigBundle.memToReg <= UInt<1>("h0") @[IDModule.scala 177:39]
                else :
                  node _T_15 = eq(UInt<6>("h37"), _T_7) @[IDModule.scala 113:22]
                  when _T_15 : @[IDModule.scala 113:22]
                    node _io_imm_T_32 = bits(instr, 31, 31) @[IDModule.scala 180:24]
                    node _io_imm_T_33 = bits(instr, 19, 12) @[IDModule.scala 180:37]
                    node _io_imm_T_34 = cat(_io_imm_T_32, _io_imm_T_33) @[IDModule.scala 180:29]
                    node _io_imm_T_35 = bits(instr, 20, 20) @[IDModule.scala 180:53]
                    node _io_imm_T_36 = cat(_io_imm_T_34, _io_imm_T_35) @[IDModule.scala 180:45]
                    node _io_imm_T_37 = bits(instr, 30, 21) @[IDModule.scala 180:66]
                    node _io_imm_T_38 = cat(_io_imm_T_36, _io_imm_T_37) @[IDModule.scala 180:58]
                    node _io_imm_T_39 = cat(_io_imm_T_38, UInt<1>("h0")) @[IDModule.scala 180:74]
                    node _io_imm_T_40 = asSInt(_io_imm_T_39) @[IDModule.scala 180:86]
                    io.imm <= _io_imm_T_40 @[IDModule.scala 180:14]
                    branchCheck <= UInt<1>("h1") @[IDModule.scala 181:19]
                    branch <= UInt<1>("h1") @[IDModule.scala 182:14]
                  else :
                    node _T_16 = eq(UInt<5>("h1b"), _T_7) @[IDModule.scala 113:22]
                    when _T_16 : @[IDModule.scala 113:22]
                      node _io_imm_T_41 = and(instr, UInt<32>("hfffff000")) @[IDModule.scala 184:35]
                      node _io_imm_T_42 = asSInt(_io_imm_T_41) @[IDModule.scala 184:53]
                      io.imm <= _io_imm_T_42 @[IDModule.scala 184:24]
                    else :
                      node _T_17 = eq(UInt<4>("hb"), _T_7) @[IDModule.scala 113:22]
                      when _T_17 : @[IDModule.scala 113:22]
                        node _io_imm_T_43 = and(instr, UInt<32>("hfffff000")) @[IDModule.scala 185:35]
                        node _io_imm_T_44 = asSInt(_io_imm_T_43) @[IDModule.scala 185:53]
                        io.imm <= _io_imm_T_44 @[IDModule.scala 185:24]
    node _a7_T = bits(io.ecallForward, 0, 0) @[IDModule.scala 189:31]
    node _a7_T_1 = bits(io.ecallForward, 1, 1) @[IDModule.scala 189:63]
    node _a7_T_2 = mux(_a7_T_1, io.resMEM, registerFile[17]) @[IDModule.scala 189:47]
    node a7 = mux(_a7_T, io.resEX, _a7_T_2) @[IDModule.scala 189:15]
    node _io_halt_T = eq(a7, asSInt(UInt<5>("ha"))) @[IDModule.scala 190:30]
    node _io_halt_T_1 = and(ecall, _io_halt_T) @[IDModule.scala 190:24]
    node _io_halt_T_2 = mux(_io_halt_T_1, UInt<1>("h1"), UInt<1>("h0")) @[IDModule.scala 190:17]
    io.halt <= _io_halt_T_2 @[IDModule.scala 190:11]
    io.exControl.aluOpSelect <= UInt<1>("h0") @[IDModule.scala 194:28]
    node _T_18 = eq(UInt<1>("h0"), aluOPType) @[IDModule.scala 195:20]
    when _T_18 : @[IDModule.scala 195:20]
      node _T_19 = bits(instr, 30, 30) @[IDModule.scala 197:19]
      node _T_20 = bits(instr, 14, 12) @[IDModule.scala 197:32]
      node _T_21 = cat(_T_19, _T_20) @[IDModule.scala 197:24]
      node _T_22 = eq(UInt<1>("h0"), _T_21) @[IDModule.scala 197:40]
      when _T_22 : @[IDModule.scala 197:40]
        io.exControl.aluOpSelect <= UInt<1>("h0") @[IDModule.scala 198:48]
      else :
        node _T_23 = eq(UInt<4>("h8"), _T_21) @[IDModule.scala 197:40]
        when _T_23 : @[IDModule.scala 197:40]
          io.exControl.aluOpSelect <= UInt<1>("h1") @[IDModule.scala 199:48]
        else :
          node _T_24 = eq(UInt<3>("h4"), _T_21) @[IDModule.scala 197:40]
          when _T_24 : @[IDModule.scala 197:40]
            io.exControl.aluOpSelect <= UInt<2>("h2") @[IDModule.scala 200:48]
          else :
            node _T_25 = eq(UInt<3>("h6"), _T_21) @[IDModule.scala 197:40]
            when _T_25 : @[IDModule.scala 197:40]
              io.exControl.aluOpSelect <= UInt<2>("h3") @[IDModule.scala 201:48]
            else :
              node _T_26 = eq(UInt<3>("h7"), _T_21) @[IDModule.scala 197:40]
              when _T_26 : @[IDModule.scala 197:40]
                io.exControl.aluOpSelect <= UInt<3>("h4") @[IDModule.scala 202:48]
              else :
                node _T_27 = eq(UInt<1>("h1"), _T_21) @[IDModule.scala 197:40]
                when _T_27 : @[IDModule.scala 197:40]
                  io.exControl.aluOpSelect <= UInt<3>("h5") @[IDModule.scala 203:48]
                else :
                  node _T_28 = eq(UInt<3>("h5"), _T_21) @[IDModule.scala 197:40]
                  when _T_28 : @[IDModule.scala 197:40]
                    io.exControl.aluOpSelect <= UInt<3>("h6") @[IDModule.scala 204:48]
                  else :
                    node _T_29 = eq(UInt<4>("hd"), _T_21) @[IDModule.scala 197:40]
                    when _T_29 : @[IDModule.scala 197:40]
                      io.exControl.aluOpSelect <= UInt<3>("h7") @[IDModule.scala 205:48]
                    else :
                      node _T_30 = eq(UInt<2>("h2"), _T_21) @[IDModule.scala 197:40]
                      when _T_30 : @[IDModule.scala 197:40]
                        io.exControl.aluOpSelect <= UInt<4>("h8") @[IDModule.scala 206:48]
                      else :
                        node _T_31 = eq(UInt<2>("h3"), _T_21) @[IDModule.scala 197:40]
                        when _T_31 : @[IDModule.scala 197:40]
                          io.exControl.aluOpSelect <= UInt<4>("h9") @[IDModule.scala 207:48]
    else :
      node _T_32 = eq(UInt<1>("h1"), aluOPType) @[IDModule.scala 195:20]
      when _T_32 : @[IDModule.scala 195:20]
        node _T_33 = bits(instr, 14, 12) @[IDModule.scala 211:19]
        node _T_34 = eq(UInt<1>("h0"), _T_33) @[IDModule.scala 211:27]
        when _T_34 : @[IDModule.scala 211:27]
          io.exControl.aluOpSelect <= UInt<1>("h0") @[IDModule.scala 212:47]
        else :
          node _T_35 = eq(UInt<3>("h4"), _T_33) @[IDModule.scala 211:27]
          when _T_35 : @[IDModule.scala 211:27]
            io.exControl.aluOpSelect <= UInt<2>("h2") @[IDModule.scala 213:47]
          else :
            node _T_36 = eq(UInt<3>("h6"), _T_33) @[IDModule.scala 211:27]
            when _T_36 : @[IDModule.scala 211:27]
              io.exControl.aluOpSelect <= UInt<2>("h3") @[IDModule.scala 214:47]
            else :
              node _T_37 = eq(UInt<3>("h7"), _T_33) @[IDModule.scala 211:27]
              when _T_37 : @[IDModule.scala 211:27]
                io.exControl.aluOpSelect <= UInt<3>("h4") @[IDModule.scala 215:47]
              else :
                node _T_38 = eq(UInt<1>("h1"), _T_33) @[IDModule.scala 211:27]
                when _T_38 : @[IDModule.scala 211:27]
                  node _io_exControl_aluOpSelect_T = bits(io.imm, 11, 5) @[IDModule.scala 216:60]
                  node _io_exControl_aluOpSelect_T_1 = eq(_io_exControl_aluOpSelect_T, UInt<1>("h0")) @[IDModule.scala 216:67]
                  node _io_exControl_aluOpSelect_T_2 = mux(_io_exControl_aluOpSelect_T_1, UInt<3>("h5"), UInt<1>("h0")) @[IDModule.scala 216:53]
                  io.exControl.aluOpSelect <= _io_exControl_aluOpSelect_T_2 @[IDModule.scala 216:47]
                else :
                  node _T_39 = eq(UInt<3>("h5"), _T_33) @[IDModule.scala 211:27]
                  when _T_39 : @[IDModule.scala 211:27]
                    node _io_exControl_aluOpSelect_T_3 = bits(io.imm, 11, 5) @[IDModule.scala 217:60]
                    node _io_exControl_aluOpSelect_T_4 = eq(_io_exControl_aluOpSelect_T_3, UInt<1>("h0")) @[IDModule.scala 217:67]
                    node _io_exControl_aluOpSelect_T_5 = bits(io.imm, 11, 5) @[IDModule.scala 217:100]
                    node _io_exControl_aluOpSelect_T_6 = eq(_io_exControl_aluOpSelect_T_5, UInt<6>("h20")) @[IDModule.scala 217:106]
                    node _io_exControl_aluOpSelect_T_7 = mux(_io_exControl_aluOpSelect_T_6, UInt<3>("h7"), UInt<1>("h0")) @[IDModule.scala 217:93]
                    node _io_exControl_aluOpSelect_T_8 = mux(_io_exControl_aluOpSelect_T_4, UInt<3>("h6"), _io_exControl_aluOpSelect_T_7) @[IDModule.scala 217:53]
                    io.exControl.aluOpSelect <= _io_exControl_aluOpSelect_T_8 @[IDModule.scala 217:47]
                  else :
                    node _T_40 = eq(UInt<2>("h2"), _T_33) @[IDModule.scala 211:27]
                    when _T_40 : @[IDModule.scala 211:27]
                      io.exControl.aluOpSelect <= UInt<4>("h8") @[IDModule.scala 218:47]
                    else :
                      node _T_41 = eq(UInt<2>("h3"), _T_33) @[IDModule.scala 211:27]
                      when _T_41 : @[IDModule.scala 211:27]
                        io.exControl.aluOpSelect <= UInt<4>("h9") @[IDModule.scala 219:47]
      else :
        node _T_42 = eq(UInt<2>("h2"), aluOPType) @[IDModule.scala 195:20]
        when _T_42 : @[IDModule.scala 195:20]
          io.exControl.aluOpSelect <= UInt<1>("h0") @[IDModule.scala 223:32]
          node _io_exControl_sigBundle_memSize_T = bits(instr, 14, 12) @[IDModule.scala 224:46]
          io.exControl.sigBundle.memSize <= _io_exControl_sigBundle_memSize_T @[IDModule.scala 224:38]
    node _T_43 = bits(instr, 6, 1) @[IDModule.scala 229:15]
    node _T_44 = eq(UInt<6>("h37"), _T_43) @[IDModule.scala 229:21]
    when _T_44 : @[IDModule.scala 229:21]
      io.exControl.aluOpSelect <= UInt<4>("ha") @[IDModule.scala 230:46]
    else :
      node _T_45 = eq(UInt<6>("h33"), _T_43) @[IDModule.scala 229:21]
      when _T_45 : @[IDModule.scala 229:21]
        io.exControl.aluOpSelect <= UInt<4>("ha") @[IDModule.scala 231:46]
      else :
        node _T_46 = eq(UInt<5>("h1b"), _T_43) @[IDModule.scala 229:21]
        when _T_46 : @[IDModule.scala 229:21]
          io.exControl.aluOpSelect <= UInt<4>("hb") @[IDModule.scala 232:46]
        else :
          node _T_47 = eq(UInt<4>("hb"), _T_43) @[IDModule.scala 229:21]
          when _T_47 : @[IDModule.scala 229:21]
            io.exControl.aluOpSelect <= UInt<4>("hc") @[IDModule.scala 233:46]
    when io.regWriteIn : @[IDModule.scala 237:22]
      registerFile[io.writeRegIdx] <= io.writeRegData @[IDModule.scala 238:34]
    node _io_pcSrc_T = and(branch, branchCheck) @[IDModule.scala 242:22]
    io.pcSrc <= _io_pcSrc_T @[IDModule.scala 242:12]
    node ldBranchHazard = and(io.pcSrc, io.ldBraHazard) @[IDModule.scala 243:33]
    node _io_branchAddr_T = add(rs1data, io.imm) @[IDModule.scala 246:68]
    node _io_branchAddr_T_1 = tail(_io_branchAddr_T, 1) @[IDModule.scala 246:68]
    node _io_branchAddr_T_2 = asSInt(_io_branchAddr_T_1) @[IDModule.scala 246:68]
    node _io_branchAddr_T_3 = asSInt(pcIn) @[IDModule.scala 246:83]
    node _io_branchAddr_T_4 = add(_io_branchAddr_T_3, io.imm) @[IDModule.scala 246:90]
    node _io_branchAddr_T_5 = tail(_io_branchAddr_T_4, 1) @[IDModule.scala 246:90]
    node _io_branchAddr_T_6 = asSInt(_io_branchAddr_T_5) @[IDModule.scala 246:90]
    node _io_branchAddr_T_7 = mux(pcSelect, _io_branchAddr_T_2, _io_branchAddr_T_6) @[IDModule.scala 246:49]
    node _io_branchAddr_T_8 = asUInt(_io_branchAddr_T_7) @[IDModule.scala 246:100]
    node _io_branchAddr_T_9 = mux(ldBranchHazard, pcIn, _io_branchAddr_T_8) @[IDModule.scala 246:23]
    io.branchAddr <= _io_branchAddr_T_9 @[IDModule.scala 246:17]
    io.pcOut <= pcIn @[IDModule.scala 249:12]
    io.rs1data <= rs1data @[IDModule.scala 250:14]
    io.rs2data <= rs2data @[IDModule.scala 251:14]
    node _io_rd_T = bits(instr, 11, 7) @[IDModule.scala 252:17]
    io.rd <= _io_rd_T @[IDModule.scala 252:9]
    registerFile[0] <= asSInt(UInt<1>("h0")) @[IDModule.scala 254:19]
    io.regFile <= registerFile @[IDModule.scala 255:14]
    node _io_aluControl_T = bits(instr, 30, 30) @[IDModule.scala 258:25]
    node _io_aluControl_T_1 = bits(instr, 14, 12) @[IDModule.scala 258:38]
    node _io_aluControl_T_2 = cat(_io_aluControl_T, _io_aluControl_T_1) @[IDModule.scala 258:30]
    io.aluControl <= _io_aluControl_T_2 @[IDModule.scala 258:17]
    io.aluOPType <= aluOPType @[IDModule.scala 259:16]

  module EXModule :
    input clock : Clock
    input reset : Reset
    output io : { flip rs1data : SInt<32>, flip rs2dataIn : SInt<32>, flip pc : UInt<32>, flip rdIn : UInt<5>, flip imm : SInt<32>, aluResult : SInt<32>, rs2DataOut : SInt<32>, rdOut : UInt<5>, flip exControl : { sigBundle : { memWrite : UInt<1>, regWrite : UInt<1>, memToReg : UInt<1>, memSize : UInt<3>}, aluSRC : UInt<1>, aluOpSelect : UInt<4>, rs1Idx : UInt<5>, rs2Idx : UInt<5>}, flip forward1 : UInt<1>, flip forward2 : UInt<1>, flip resMEM : SInt<32>, memControl : { sigBundle : { memWrite : UInt<1>, regWrite : UInt<1>, memToReg : UInt<1>, memSize : UInt<3>}, aluSRC : UInt<1>, aluOpSelect : UInt<4>, rs1Idx : UInt<5>, rs2Idx : UInt<5>}}

    reg rs1data_REG : SInt, clock with :
      reset => (UInt<1>("h0"), rs1data_REG) @[EXModule.scala 36:54]
    rs1data_REG <= io.rs1data @[EXModule.scala 36:54]
    node rs1data = mux(io.forward1, io.resMEM, rs1data_REG) @[EXModule.scala 36:24]
    reg rs2dataIn_REG : SInt, clock with :
      reset => (UInt<1>("h0"), rs2dataIn_REG) @[EXModule.scala 37:54]
    rs2dataIn_REG <= io.rs2dataIn @[EXModule.scala 37:54]
    node rs2dataIn = mux(io.forward2, io.resMEM, rs2dataIn_REG) @[EXModule.scala 37:24]
    reg pc : UInt, clock with :
      reset => (UInt<1>("h0"), pc) @[EXModule.scala 38:28]
    pc <= io.pc @[EXModule.scala 38:28]
    reg rdIn : UInt, clock with :
      reset => (UInt<1>("h0"), rdIn) @[EXModule.scala 39:28]
    rdIn <= io.rdIn @[EXModule.scala 39:28]
    reg imm : SInt, clock with :
      reset => (UInt<1>("h0"), imm) @[EXModule.scala 40:28]
    imm <= io.imm @[EXModule.scala 40:28]
    reg exControl : { sigBundle : { memWrite : UInt<1>, regWrite : UInt<1>, memToReg : UInt<1>, memSize : UInt<3>}, aluSRC : UInt<1>, aluOpSelect : UInt<4>, rs1Idx : UInt<5>, rs2Idx : UInt<5>}, clock with :
      reset => (UInt<1>("h0"), exControl) @[EXModule.scala 43:26]
    exControl.rs2Idx <= io.exControl.rs2Idx @[EXModule.scala 43:26]
    exControl.rs1Idx <= io.exControl.rs1Idx @[EXModule.scala 43:26]
    exControl.aluOpSelect <= io.exControl.aluOpSelect @[EXModule.scala 43:26]
    exControl.aluSRC <= io.exControl.aluSRC @[EXModule.scala 43:26]
    exControl.sigBundle.memSize <= io.exControl.sigBundle.memSize @[EXModule.scala 43:26]
    exControl.sigBundle.memToReg <= io.exControl.sigBundle.memToReg @[EXModule.scala 43:26]
    exControl.sigBundle.regWrite <= io.exControl.sigBundle.regWrite @[EXModule.scala 43:26]
    exControl.sigBundle.memWrite <= io.exControl.sigBundle.memWrite @[EXModule.scala 43:26]
    wire muxALUinput : SInt<32> @[EXModule.scala 47:32]
    muxALUinput <= asSInt(UInt<32>("h0")) @[EXModule.scala 47:32]
    node _muxALUinput_T = mux(exControl.aluSRC, imm, rs2dataIn) @[EXModule.scala 48:21]
    muxALUinput <= _muxALUinput_T @[EXModule.scala 48:15]
    io.aluResult <= asSInt(UInt<1>("h0")) @[EXModule.scala 51:16]
    node _T = asUInt(UInt<1>("h0")) @[EXModule.scala 53:3]
    node _T_1 = asUInt(exControl.aluOpSelect) @[EXModule.scala 53:3]
    node _T_2 = eq(_T, _T_1) @[EXModule.scala 53:3]
    when _T_2 : @[EXModule.scala 53:3]
      node _io_aluResult_T = add(rs1data, muxALUinput) @[EXModule.scala 54:37]
      node _io_aluResult_T_1 = tail(_io_aluResult_T, 1) @[EXModule.scala 54:37]
      node _io_aluResult_T_2 = asSInt(_io_aluResult_T_1) @[EXModule.scala 54:37]
      io.aluResult <= _io_aluResult_T_2 @[EXModule.scala 54:26]
    else :
      node _T_3 = asUInt(UInt<1>("h1")) @[EXModule.scala 53:3]
      node _T_4 = asUInt(exControl.aluOpSelect) @[EXModule.scala 53:3]
      node _T_5 = eq(_T_3, _T_4) @[EXModule.scala 53:3]
      when _T_5 : @[EXModule.scala 53:3]
        node _io_aluResult_T_3 = sub(rs1data, muxALUinput) @[EXModule.scala 55:37]
        node _io_aluResult_T_4 = tail(_io_aluResult_T_3, 1) @[EXModule.scala 55:37]
        node _io_aluResult_T_5 = asSInt(_io_aluResult_T_4) @[EXModule.scala 55:37]
        io.aluResult <= _io_aluResult_T_5 @[EXModule.scala 55:26]
      else :
        node _T_6 = asUInt(UInt<2>("h2")) @[EXModule.scala 53:3]
        node _T_7 = asUInt(exControl.aluOpSelect) @[EXModule.scala 53:3]
        node _T_8 = eq(_T_6, _T_7) @[EXModule.scala 53:3]
        when _T_8 : @[EXModule.scala 53:3]
          node _io_aluResult_T_6 = xor(rs1data, muxALUinput) @[EXModule.scala 56:37]
          node _io_aluResult_T_7 = asSInt(_io_aluResult_T_6) @[EXModule.scala 56:37]
          io.aluResult <= _io_aluResult_T_7 @[EXModule.scala 56:26]
        else :
          node _T_9 = asUInt(UInt<2>("h3")) @[EXModule.scala 53:3]
          node _T_10 = asUInt(exControl.aluOpSelect) @[EXModule.scala 53:3]
          node _T_11 = eq(_T_9, _T_10) @[EXModule.scala 53:3]
          when _T_11 : @[EXModule.scala 53:3]
            node _io_aluResult_T_8 = or(rs1data, muxALUinput) @[EXModule.scala 57:37]
            node _io_aluResult_T_9 = asSInt(_io_aluResult_T_8) @[EXModule.scala 57:37]
            io.aluResult <= _io_aluResult_T_9 @[EXModule.scala 57:26]
          else :
            node _T_12 = asUInt(UInt<3>("h4")) @[EXModule.scala 53:3]
            node _T_13 = asUInt(exControl.aluOpSelect) @[EXModule.scala 53:3]
            node _T_14 = eq(_T_12, _T_13) @[EXModule.scala 53:3]
            when _T_14 : @[EXModule.scala 53:3]
              node _io_aluResult_T_10 = and(rs1data, muxALUinput) @[EXModule.scala 58:37]
              node _io_aluResult_T_11 = asSInt(_io_aluResult_T_10) @[EXModule.scala 58:37]
              io.aluResult <= _io_aluResult_T_11 @[EXModule.scala 58:26]
            else :
              node _T_15 = asUInt(UInt<3>("h5")) @[EXModule.scala 53:3]
              node _T_16 = asUInt(exControl.aluOpSelect) @[EXModule.scala 53:3]
              node _T_17 = eq(_T_15, _T_16) @[EXModule.scala 53:3]
              when _T_17 : @[EXModule.scala 53:3]
                node _io_aluResult_T_12 = asUInt(muxALUinput) @[EXModule.scala 59:54]
                node _io_aluResult_T_13 = bits(_io_aluResult_T_12, 4, 0) @[EXModule.scala 59:61]
                node _io_aluResult_T_14 = dshl(rs1data, _io_aluResult_T_13) @[EXModule.scala 59:37]
                io.aluResult <= _io_aluResult_T_14 @[EXModule.scala 59:26]
              else :
                node _T_18 = asUInt(UInt<3>("h6")) @[EXModule.scala 53:3]
                node _T_19 = asUInt(exControl.aluOpSelect) @[EXModule.scala 53:3]
                node _T_20 = eq(_T_18, _T_19) @[EXModule.scala 53:3]
                when _T_20 : @[EXModule.scala 53:3]
                  node _io_aluResult_T_15 = asUInt(rs1data) @[EXModule.scala 60:39]
                  node _io_aluResult_T_16 = bits(muxALUinput, 4, 0) @[EXModule.scala 60:61]
                  node _io_aluResult_T_17 = dshr(_io_aluResult_T_15, _io_aluResult_T_16) @[EXModule.scala 60:47]
                  node _io_aluResult_T_18 = asSInt(_io_aluResult_T_17) @[EXModule.scala 60:75]
                  io.aluResult <= _io_aluResult_T_18 @[EXModule.scala 60:26]
                else :
                  node _T_21 = asUInt(UInt<3>("h7")) @[EXModule.scala 53:3]
                  node _T_22 = asUInt(exControl.aluOpSelect) @[EXModule.scala 53:3]
                  node _T_23 = eq(_T_21, _T_22) @[EXModule.scala 53:3]
                  when _T_23 : @[EXModule.scala 53:3]
                    node _io_aluResult_T_19 = bits(muxALUinput, 4, 0) @[EXModule.scala 61:51]
                    node _io_aluResult_T_20 = dshr(rs1data, _io_aluResult_T_19) @[EXModule.scala 61:37]
                    io.aluResult <= _io_aluResult_T_20 @[EXModule.scala 61:26]
                  else :
                    node _T_24 = asUInt(UInt<4>("h8")) @[EXModule.scala 53:3]
                    node _T_25 = asUInt(exControl.aluOpSelect) @[EXModule.scala 53:3]
                    node _T_26 = eq(_T_24, _T_25) @[EXModule.scala 53:3]
                    when _T_26 : @[EXModule.scala 53:3]
                      node _T_27 = lt(rs1data, muxALUinput) @[EXModule.scala 63:20]
                      when _T_27 : @[EXModule.scala 63:34]
                        io.aluResult <= asSInt(UInt<2>("h1")) @[EXModule.scala 64:22]
                      else :
                        io.aluResult <= asSInt(UInt<1>("h0")) @[EXModule.scala 66:22]
                    else :
                      node _T_28 = asUInt(UInt<4>("h9")) @[EXModule.scala 53:3]
                      node _T_29 = asUInt(exControl.aluOpSelect) @[EXModule.scala 53:3]
                      node _T_30 = eq(_T_28, _T_29) @[EXModule.scala 53:3]
                      when _T_30 : @[EXModule.scala 53:3]
                        node _T_31 = asUInt(rs1data) @[EXModule.scala 70:20]
                        node _T_32 = asUInt(muxALUinput) @[EXModule.scala 70:41]
                        node _T_33 = lt(_T_31, _T_32) @[EXModule.scala 70:27]
                        when _T_33 : @[EXModule.scala 70:48]
                          io.aluResult <= asSInt(UInt<2>("h1")) @[EXModule.scala 71:22]
                        else :
                          io.aluResult <= asSInt(UInt<1>("h0")) @[EXModule.scala 73:22]
                      else :
                        node _T_34 = asUInt(UInt<4>("ha")) @[EXModule.scala 53:3]
                        node _T_35 = asUInt(exControl.aluOpSelect) @[EXModule.scala 53:3]
                        node _T_36 = eq(_T_34, _T_35) @[EXModule.scala 53:3]
                        when _T_36 : @[EXModule.scala 53:3]
                          node _io_aluResult_T_21 = add(pc, UInt<3>("h4")) @[EXModule.scala 76:34]
                          node _io_aluResult_T_22 = tail(_io_aluResult_T_21, 1) @[EXModule.scala 76:34]
                          node _io_aluResult_T_23 = asSInt(_io_aluResult_T_22) @[EXModule.scala 76:41]
                          io.aluResult <= _io_aluResult_T_23 @[EXModule.scala 76:27]
                        else :
                          node _T_37 = asUInt(UInt<4>("hb")) @[EXModule.scala 53:3]
                          node _T_38 = asUInt(exControl.aluOpSelect) @[EXModule.scala 53:3]
                          node _T_39 = eq(_T_37, _T_38) @[EXModule.scala 53:3]
                          when _T_39 : @[EXModule.scala 53:3]
                            io.aluResult <= imm @[EXModule.scala 77:26]
                          else :
                            node _T_40 = asUInt(UInt<4>("hc")) @[EXModule.scala 53:3]
                            node _T_41 = asUInt(exControl.aluOpSelect) @[EXModule.scala 53:3]
                            node _T_42 = eq(_T_40, _T_41) @[EXModule.scala 53:3]
                            when _T_42 : @[EXModule.scala 53:3]
                              node _io_aluResult_T_24 = asSInt(pc) @[EXModule.scala 78:35]
                              node _io_aluResult_T_25 = add(_io_aluResult_T_24, imm) @[EXModule.scala 78:42]
                              node _io_aluResult_T_26 = tail(_io_aluResult_T_25, 1) @[EXModule.scala 78:42]
                              node _io_aluResult_T_27 = asSInt(_io_aluResult_T_26) @[EXModule.scala 78:42]
                              io.aluResult <= _io_aluResult_T_27 @[EXModule.scala 78:28]
    io.memControl <= exControl @[EXModule.scala 83:17]
    io.rdOut <= rdIn @[EXModule.scala 86:12]
    io.rs2DataOut <= rs2dataIn @[EXModule.scala 87:17]

  module Memory :
    input clock : Clock
    input reset : Reset
    output io : { flip rdAddr : UInt<12>, rdData : UInt<32>, flip wrAddr : UInt<12>, flip wrData : UInt<32>, flip wrEna : UInt<1>}

    smem mem : UInt<32> [4096] @[Memory.scala 13:24]
    wire _io_rdData_WIRE : UInt @[Memory.scala 15:24]
    _io_rdData_WIRE is invalid @[Memory.scala 15:24]
    when UInt<1>("h1") : @[Memory.scala 15:24]
      _io_rdData_WIRE <= io.rdAddr @[Memory.scala 15:24]
      node _io_rdData_T = or(_io_rdData_WIRE, UInt<12>("h0")) @[Memory.scala 15:24]
      node _io_rdData_T_1 = bits(_io_rdData_T, 11, 0) @[Memory.scala 15:24]
      read mport io_rdData_MPORT = mem[_io_rdData_T_1], clock @[Memory.scala 15:24]
    io.rdData <= io_rdData_MPORT @[Memory.scala 15:13]
    when io.wrEna : @[Memory.scala 17:18]
      write mport MPORT = mem[io.wrAddr], clock
      MPORT <= io.wrData


  module MEMModule :
    input clock : Clock
    input reset : Reset
    output io : { flip aluResult : SInt<32>, flip rs2Data : SInt<32>, flip rdIn : UInt<5>, regWriteData : SInt<32>, rdOut : UInt<5>, flip memControl : { memWrite : UInt<1>, regWrite : UInt<1>, memToReg : UInt<1>, memSize : UInt<3>}, regWriteOut : UInt<1>, ioWrite : { ioLED : UInt<16>}, port : { read : UInt<1>, write : UInt<1>, addr : UInt<32>, wrData : UInt<32>, flip rdData : UInt<32>}}

    reg rdIn : UInt, clock with :
      reset => (UInt<1>("h0"), rdIn) @[MEMModule.scala 29:26]
    rdIn <= io.rdIn @[MEMModule.scala 29:26]
    reg aluResult : SInt, clock with :
      reset => (UInt<1>("h0"), aluResult) @[MEMModule.scala 30:26]
    aluResult <= io.aluResult @[MEMModule.scala 30:26]
    reg regWrite : UInt<1>, clock with :
      reset => (UInt<1>("h0"), regWrite) @[MEMModule.scala 32:26]
    regWrite <= io.memControl.regWrite @[MEMModule.scala 32:26]
    reg memToReg : UInt<1>, clock with :
      reset => (UInt<1>("h0"), memToReg) @[MEMModule.scala 33:26]
    memToReg <= io.memControl.memToReg @[MEMModule.scala 33:26]
    reg memSize : UInt, clock with :
      reset => (UInt<1>("h0"), memSize) @[MEMModule.scala 34:26]
    memSize <= io.memControl.memSize @[MEMModule.scala 34:26]
    reg memWrite : UInt<1>, clock with :
      reset => (UInt<1>("h0"), memWrite) @[MEMModule.scala 35:26]
    memWrite <= io.memControl.memWrite @[MEMModule.scala 35:26]
    reg rs2Data : SInt, clock with :
      reset => (UInt<1>("h0"), rs2Data) @[MEMModule.scala 36:24]
    rs2Data <= io.rs2Data @[MEMModule.scala 36:24]
    io.port.write <= UInt<1>("h0") @[Bus.scala 56:18]
    io.port.read <= UInt<1>("h0") @[Bus.scala 57:17]
    io.port.addr is invalid @[Bus.scala 60:17]
    io.port.wrData is invalid @[Bus.scala 61:19]
    inst memory of Memory @[MEMModule.scala 41:25]
    memory.clock <= clock
    memory.reset <= reset
    wire memOutput : SInt<32> @[MEMModule.scala 42:30]
    memOutput <= asSInt(UInt<32>("h0")) @[MEMModule.scala 42:30]
    node _memory_io_rdAddr_T = asUInt(io.aluResult) @[MEMModule.scala 45:37]
    memory.io.rdAddr <= _memory_io_rdAddr_T @[MEMModule.scala 45:21]
    node _memory_io_wrAddr_T = asUInt(io.aluResult) @[MEMModule.scala 46:37]
    memory.io.wrAddr <= _memory_io_wrAddr_T @[MEMModule.scala 46:21]
    node _memory_io_wrData_T = asUInt(io.rs2Data) @[MEMModule.scala 47:35]
    memory.io.wrData <= _memory_io_wrData_T @[MEMModule.scala 47:21]
    memory.io.wrEna <= io.memControl.memWrite @[MEMModule.scala 48:21]
    reg ioLED : UInt<16>, clock with :
      reset => (reset, UInt<16>("h0")) @[MEMModule.scala 52:22]
    ioLED <= ioLED @[MEMModule.scala 53:9]
    reg ioOut : SInt<32>, clock with :
      reset => (reset, asSInt(UInt<32>("h0"))) @[MEMModule.scala 54:22]
    node _T = asUInt(asSInt(UInt<14>("h1000"))) @[MEMModule.scala 57:23]
    node _T_1 = asUInt(io.aluResult) @[MEMModule.scala 57:23]
    node _T_2 = eq(_T, _T_1) @[MEMModule.scala 57:23]
    when _T_2 : @[MEMModule.scala 57:23]
      when io.memControl.memWrite : @[MEMModule.scala 59:35]
        node _ioLED_T = bits(io.rs2Data, 15, 0) @[MEMModule.scala 60:28]
        ioLED <= _ioLED_T @[MEMModule.scala 60:15]
    else :
      node _T_3 = asUInt(asSInt(UInt<14>("h1001"))) @[MEMModule.scala 57:23]
      node _T_4 = asUInt(io.aluResult) @[MEMModule.scala 57:23]
      node _T_5 = eq(_T_3, _T_4) @[MEMModule.scala 57:23]
      when _T_5 : @[MEMModule.scala 57:23]
        when io.memControl.memWrite : @[MEMModule.scala 64:36]
          node _T_6 = asUInt(io.rs2Data) @[MEMModule.scala 65:45]
          node _T_7 = bits(_T_6, 7, 0) @[MEMModule.scala 65:51]
          io.port.write <= UInt<1>("h1") @[Bus.scala 38:18]
          io.port.read <= UInt<1>("h0") @[Bus.scala 39:17]
          io.port.addr <= UInt<1>("h0") @[Bus.scala 40:17]
          io.port.wrData <= _T_7 @[Bus.scala 41:19]
        else :
          io.port.write <= UInt<1>("h0") @[Bus.scala 48:18]
          io.port.read <= UInt<1>("h1") @[Bus.scala 49:17]
          io.port.addr <= UInt<1>("h0") @[Bus.scala 50:17]
          io.port.wrData is invalid @[Bus.scala 51:19]
          node _ioOut_T = asSInt(io.port.rdData) @[MEMModule.scala 68:33]
          ioOut <= _ioOut_T @[MEMModule.scala 68:15]
      else :
        node _T_8 = asUInt(asSInt(UInt<14>("h1002"))) @[MEMModule.scala 57:23]
        node _T_9 = asUInt(io.aluResult) @[MEMModule.scala 57:23]
        node _T_10 = eq(_T_8, _T_9) @[MEMModule.scala 57:23]
        when _T_10 : @[MEMModule.scala 57:23]
          node _T_11 = eq(io.memControl.memWrite, UInt<1>("h0")) @[MEMModule.scala 73:12]
          when _T_11 : @[MEMModule.scala 73:37]
            io.port.write <= UInt<1>("h0") @[Bus.scala 48:18]
            io.port.read <= UInt<1>("h1") @[Bus.scala 49:17]
            io.port.addr <= UInt<1>("h1") @[Bus.scala 50:17]
            io.port.wrData is invalid @[Bus.scala 51:19]
            node _ioOut_T_1 = asSInt(io.port.rdData) @[MEMModule.scala 75:33]
            ioOut <= _ioOut_T_1 @[MEMModule.scala 75:15]
    node _memOutput_T = geq(aluResult, asSInt(UInt<14>("h1000"))) @[MEMModule.scala 86:30]
    node _memOutput_T_1 = asSInt(memory.io.rdData) @[MEMModule.scala 86:63]
    node _memOutput_T_2 = mux(_memOutput_T, ioOut, _memOutput_T_1) @[MEMModule.scala 86:19]
    memOutput <= _memOutput_T_2 @[MEMModule.scala 86:13]
    wire sizedMemOutput : SInt<32> @[MEMModule.scala 89:35]
    sizedMemOutput <= asSInt(UInt<32>("h0")) @[MEMModule.scala 89:35]
    node _T_12 = eq(UInt<1>("h0"), memSize) @[MEMModule.scala 91:3]
    when _T_12 : @[MEMModule.scala 91:3]
      node _sizedMemOutput_T = bits(memOutput, 7, 7) @[MEMModule.scala 92:44]
      node _sizedMemOutput_T_1 = eq(_sizedMemOutput_T, UInt<1>("h1")) @[MEMModule.scala 92:48]
      node _sizedMemOutput_T_2 = bits(memOutput, 7, 0) @[MEMModule.scala 92:80]
      node _sizedMemOutput_T_3 = cat(UInt<24>("hffffff"), _sizedMemOutput_T_2) @[MEMModule.scala 92:68]
      node _sizedMemOutput_T_4 = bits(memOutput, 7, 0) @[MEMModule.scala 92:110]
      node _sizedMemOutput_T_5 = cat(UInt<1>("h0"), _sizedMemOutput_T_4) @[MEMModule.scala 92:98]
      node _sizedMemOutput_T_6 = mux(_sizedMemOutput_T_1, _sizedMemOutput_T_3, _sizedMemOutput_T_5) @[MEMModule.scala 92:34]
      node _sizedMemOutput_T_7 = asSInt(_sizedMemOutput_T_6) @[MEMModule.scala 92:117]
      sizedMemOutput <= _sizedMemOutput_T_7 @[MEMModule.scala 92:28]
    else :
      node _T_13 = eq(UInt<1>("h1"), memSize) @[MEMModule.scala 91:3]
      when _T_13 : @[MEMModule.scala 91:3]
        node _sizedMemOutput_T_8 = bits(memOutput, 15, 15) @[MEMModule.scala 93:44]
        node _sizedMemOutput_T_9 = eq(_sizedMemOutput_T_8, UInt<1>("h1")) @[MEMModule.scala 93:49]
        node _sizedMemOutput_T_10 = bits(memOutput, 15, 0) @[MEMModule.scala 93:79]
        node _sizedMemOutput_T_11 = cat(UInt<16>("hffff"), _sizedMemOutput_T_10) @[MEMModule.scala 93:67]
        node _sizedMemOutput_T_12 = bits(memOutput, 15, 0) @[MEMModule.scala 93:108]
        node _sizedMemOutput_T_13 = cat(UInt<1>("h0"), _sizedMemOutput_T_12) @[MEMModule.scala 93:96]
        node _sizedMemOutput_T_14 = mux(_sizedMemOutput_T_9, _sizedMemOutput_T_11, _sizedMemOutput_T_13) @[MEMModule.scala 93:34]
        node _sizedMemOutput_T_15 = asSInt(_sizedMemOutput_T_14) @[MEMModule.scala 93:116]
        sizedMemOutput <= _sizedMemOutput_T_15 @[MEMModule.scala 93:28]
      else :
        node _T_14 = eq(UInt<2>("h2"), memSize) @[MEMModule.scala 91:3]
        when _T_14 : @[MEMModule.scala 91:3]
          sizedMemOutput <= memOutput @[MEMModule.scala 94:28]
        else :
          node _T_15 = eq(UInt<3>("h4"), memSize) @[MEMModule.scala 91:3]
          when _T_15 : @[MEMModule.scala 91:3]
            node _sizedMemOutput_T_16 = bits(memOutput, 7, 0) @[MEMModule.scala 95:56]
            node _sizedMemOutput_T_17 = cat(UInt<1>("h0"), _sizedMemOutput_T_16) @[MEMModule.scala 95:44]
            node _sizedMemOutput_T_18 = asSInt(_sizedMemOutput_T_17) @[MEMModule.scala 95:63]
            sizedMemOutput <= _sizedMemOutput_T_18 @[MEMModule.scala 95:28]
          else :
            node _T_16 = eq(UInt<3>("h5"), memSize) @[MEMModule.scala 91:3]
            when _T_16 : @[MEMModule.scala 91:3]
              node _sizedMemOutput_T_19 = bits(memOutput, 15, 0) @[MEMModule.scala 96:54]
              node _sizedMemOutput_T_20 = cat(UInt<1>("h0"), _sizedMemOutput_T_19) @[MEMModule.scala 96:42]
              node _sizedMemOutput_T_21 = asSInt(_sizedMemOutput_T_20) @[MEMModule.scala 96:62]
              sizedMemOutput <= _sizedMemOutput_T_21 @[MEMModule.scala 96:28]
    node _io_regWriteData_T = mux(memToReg, sizedMemOutput, aluResult) @[MEMModule.scala 100:25]
    io.regWriteData <= _io_regWriteData_T @[MEMModule.scala 100:19]
    io.rdOut <= rdIn @[MEMModule.scala 103:12]
    io.regWriteOut <= regWrite @[MEMModule.scala 104:18]
    io.ioWrite.ioLED <= ioLED @[MEMModule.scala 107:20]

  module ForwardingModule :
    input clock : Clock
    input reset : Reset
    output io : { flip rs1IdxID : UInt<5>, flip rs1IdxEX : UInt<5>, flip rs2IdxID : UInt<5>, flip rs2IdxEX : UInt<5>, flip exHasLoad : UInt<1>, flip rdEX : UInt<5>, flip rdMEM : UInt<5>, flip regWriteEX : UInt<1>, flip regWriteMEM : UInt<1>, branchControl1 : UInt<2>, branchControl2 : UInt<2>, aluControl1 : UInt<1>, aluControl2 : UInt<1>, ldBraHazard : UInt<1>, ecallForward : UInt<2>}

    io.branchControl1 <= UInt<1>("h0") @[ForwardingModule.scala 32:21]
    io.branchControl2 <= UInt<1>("h0") @[ForwardingModule.scala 33:21]
    io.aluControl1 <= UInt<1>("h0") @[ForwardingModule.scala 34:18]
    io.aluControl2 <= UInt<1>("h0") @[ForwardingModule.scala 35:18]
    io.ldBraHazard <= UInt<1>("h0") @[ForwardingModule.scala 36:18]
    io.ecallForward <= UInt<1>("h0") @[ForwardingModule.scala 37:19]
    node _T = neq(io.rs1IdxEX, UInt<1>("h0")) @[ForwardingModule.scala 43:21]
    node _T_1 = eq(io.rs1IdxEX, io.rdMEM) @[ForwardingModule.scala 43:45]
    node _T_2 = and(_T, _T_1) @[ForwardingModule.scala 43:30]
    node _T_3 = and(_T_2, io.regWriteMEM) @[ForwardingModule.scala 43:59]
    when _T_3 : @[ForwardingModule.scala 43:76]
      io.aluControl1 <= UInt<1>("h1") @[ForwardingModule.scala 44:20]
    node _T_4 = neq(io.rs2IdxEX, UInt<1>("h0")) @[ForwardingModule.scala 48:21]
    node _T_5 = eq(io.rs2IdxEX, io.rdMEM) @[ForwardingModule.scala 48:45]
    node _T_6 = and(_T_4, _T_5) @[ForwardingModule.scala 48:30]
    node _T_7 = and(_T_6, io.regWriteMEM) @[ForwardingModule.scala 48:59]
    when _T_7 : @[ForwardingModule.scala 48:76]
      io.aluControl2 <= UInt<1>("h1") @[ForwardingModule.scala 49:20]
    node _T_8 = neq(io.rs1IdxID, UInt<1>("h0")) @[ForwardingModule.scala 54:21]
    node _T_9 = and(_T_8, io.regWriteMEM) @[ForwardingModule.scala 54:30]
    node _T_10 = eq(io.rdMEM, io.rs1IdxID) @[ForwardingModule.scala 54:59]
    node _T_11 = and(_T_9, _T_10) @[ForwardingModule.scala 54:47]
    when _T_11 : @[ForwardingModule.scala 54:76]
      io.branchControl1 <= UInt<2>("h2") @[ForwardingModule.scala 55:23]
    node _T_12 = neq(io.rs1IdxID, UInt<1>("h0")) @[ForwardingModule.scala 58:21]
    node _T_13 = and(_T_12, io.regWriteEX) @[ForwardingModule.scala 58:30]
    node _T_14 = eq(io.rdEX, io.rs1IdxID) @[ForwardingModule.scala 58:57]
    node _T_15 = and(_T_13, _T_14) @[ForwardingModule.scala 58:46]
    when _T_15 : @[ForwardingModule.scala 58:74]
      io.branchControl1 <= UInt<1>("h1") @[ForwardingModule.scala 59:23]
    node _T_16 = neq(io.rs2IdxID, UInt<1>("h0")) @[ForwardingModule.scala 63:21]
    node _T_17 = and(_T_16, io.regWriteMEM) @[ForwardingModule.scala 63:30]
    node _T_18 = eq(io.rdMEM, io.rs2IdxID) @[ForwardingModule.scala 63:59]
    node _T_19 = and(_T_17, _T_18) @[ForwardingModule.scala 63:47]
    when _T_19 : @[ForwardingModule.scala 63:76]
      io.branchControl2 <= UInt<2>("h2") @[ForwardingModule.scala 64:23]
    node _T_20 = neq(io.rs2IdxID, UInt<1>("h0")) @[ForwardingModule.scala 67:21]
    node _T_21 = and(_T_20, io.regWriteEX) @[ForwardingModule.scala 67:30]
    node _T_22 = eq(io.rdEX, io.rs2IdxID) @[ForwardingModule.scala 67:57]
    node _T_23 = and(_T_21, _T_22) @[ForwardingModule.scala 67:46]
    when _T_23 : @[ForwardingModule.scala 67:74]
      io.branchControl2 <= UInt<1>("h1") @[ForwardingModule.scala 68:23]
    node _T_24 = neq(io.rdEX, UInt<1>("h0")) @[ForwardingModule.scala 72:17]
    node _T_25 = and(_T_24, io.exHasLoad) @[ForwardingModule.scala 72:26]
    node _T_26 = eq(io.rdEX, io.rs1IdxID) @[ForwardingModule.scala 72:53]
    node _T_27 = eq(io.rdEX, io.rs2IdxID) @[ForwardingModule.scala 72:81]
    node _T_28 = or(_T_26, _T_27) @[ForwardingModule.scala 72:70]
    node _T_29 = and(_T_25, _T_28) @[ForwardingModule.scala 72:41]
    when _T_29 : @[ForwardingModule.scala 72:99]
      io.ldBraHazard <= UInt<1>("h1") @[ForwardingModule.scala 73:20]
    node _T_30 = eq(io.rdMEM, UInt<5>("h11")) @[ForwardingModule.scala 76:34]
    node _T_31 = and(io.regWriteMEM, _T_30) @[ForwardingModule.scala 76:23]
    when _T_31 : @[ForwardingModule.scala 76:43]
      io.ecallForward <= UInt<2>("h2") @[ForwardingModule.scala 77:21]
    node _T_32 = eq(io.rdEX, UInt<5>("h11")) @[ForwardingModule.scala 80:32]
    node _T_33 = and(io.regWriteEX, _T_32) @[ForwardingModule.scala 80:22]
    when _T_33 : @[ForwardingModule.scala 80:41]
      io.ecallForward <= UInt<1>("h1") @[ForwardingModule.scala 81:21]


  module TopLevelSynthesize :
    input clock : Clock
    input reset : UInt<1>
    output io : { ioLED : UInt<16>, uart : { tx : UInt<1>, flip rx : UInt<1>}}

    inst mmUart of MemoryMappedUart @[MemoryMappedUart.scala 115:31]
    mmUart.clock <= clock
    mmUart.reset <= reset
    inst ifModule of IFModuleTest @[TopLevelSynthesize.scala 33:24]
    ifModule.clock <= clock
    ifModule.reset <= reset
    inst idModule of IDModule @[TopLevelSynthesize.scala 34:24]
    idModule.clock <= clock
    idModule.reset <= reset
    inst exModule of EXModule @[TopLevelSynthesize.scala 35:24]
    exModule.clock <= clock
    exModule.reset <= reset
    inst memModule of MEMModule @[TopLevelSynthesize.scala 36:25]
    memModule.clock <= clock
    memModule.reset <= reset
    inst forwardingModule of ForwardingModule @[TopLevelSynthesize.scala 37:32]
    forwardingModule.clock <= clock
    forwardingModule.reset <= reset
    reg halted : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[TopLevelSynthesize.scala 39:23]
    halted <= halted @[TopLevelSynthesize.scala 40:10]
    reg runningReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h1")) @[TopLevelSynthesize.scala 41:27]
    runningReg <= runningReg @[TopLevelSynthesize.scala 42:14]
    when halted : @[TopLevelSynthesize.scala 44:15]
      runningReg <= UInt<1>("h0") @[TopLevelSynthesize.scala 45:16]
    ifModule.io.pcSrc <= idModule.io.pcSrc @[TopLevelSynthesize.scala 49:21]
    ifModule.io.branchAddr <= idModule.io.branchAddr @[TopLevelSynthesize.scala 50:26]
    idModule.io.pcIn <= ifModule.io.pc @[TopLevelSynthesize.scala 53:20]
    idModule.io.writeRegIdx <= memModule.io.rdOut @[TopLevelSynthesize.scala 54:27]
    idModule.io.regWriteIn <= memModule.io.regWriteOut @[TopLevelSynthesize.scala 55:26]
    idModule.io.writeRegData <= memModule.io.regWriteData @[TopLevelSynthesize.scala 56:28]
    idModule.io.instr <= ifModule.io.instruction @[TopLevelSynthesize.scala 57:21]
    idModule.io.resEX <= exModule.io.aluResult @[TopLevelSynthesize.scala 58:21]
    idModule.io.resMEM <= memModule.io.regWriteData @[TopLevelSynthesize.scala 59:22]
    idModule.io.forward1 <= forwardingModule.io.branchControl1 @[TopLevelSynthesize.scala 60:24]
    idModule.io.forward2 <= forwardingModule.io.branchControl2 @[TopLevelSynthesize.scala 61:24]
    idModule.io.ldBraHazard <= forwardingModule.io.ldBraHazard @[TopLevelSynthesize.scala 62:27]
    idModule.io.ecallForward <= forwardingModule.io.ecallForward @[TopLevelSynthesize.scala 63:28]
    exModule.io.rs1data <= idModule.io.rs1data @[TopLevelSynthesize.scala 66:23]
    exModule.io.rs2dataIn <= idModule.io.rs2data @[TopLevelSynthesize.scala 67:25]
    exModule.io.pc <= idModule.io.pcOut @[TopLevelSynthesize.scala 68:18]
    exModule.io.rdIn <= idModule.io.rd @[TopLevelSynthesize.scala 69:20]
    exModule.io.imm <= idModule.io.imm @[TopLevelSynthesize.scala 70:19]
    exModule.io.exControl.rs2Idx <= idModule.io.exControl.rs2Idx @[TopLevelSynthesize.scala 71:25]
    exModule.io.exControl.rs1Idx <= idModule.io.exControl.rs1Idx @[TopLevelSynthesize.scala 71:25]
    exModule.io.exControl.aluOpSelect <= idModule.io.exControl.aluOpSelect @[TopLevelSynthesize.scala 71:25]
    exModule.io.exControl.aluSRC <= idModule.io.exControl.aluSRC @[TopLevelSynthesize.scala 71:25]
    exModule.io.exControl.sigBundle.memSize <= idModule.io.exControl.sigBundle.memSize @[TopLevelSynthesize.scala 71:25]
    exModule.io.exControl.sigBundle.memToReg <= idModule.io.exControl.sigBundle.memToReg @[TopLevelSynthesize.scala 71:25]
    exModule.io.exControl.sigBundle.regWrite <= idModule.io.exControl.sigBundle.regWrite @[TopLevelSynthesize.scala 71:25]
    exModule.io.exControl.sigBundle.memWrite <= idModule.io.exControl.sigBundle.memWrite @[TopLevelSynthesize.scala 71:25]
    exModule.io.resMEM <= memModule.io.regWriteData @[TopLevelSynthesize.scala 72:22]
    exModule.io.forward1 <= forwardingModule.io.aluControl1 @[TopLevelSynthesize.scala 73:24]
    exModule.io.forward2 <= forwardingModule.io.aluControl2 @[TopLevelSynthesize.scala 74:24]
    memModule.io.aluResult <= exModule.io.aluResult @[TopLevelSynthesize.scala 77:26]
    memModule.io.rs2Data <= exModule.io.rs2DataOut @[TopLevelSynthesize.scala 78:24]
    memModule.io.rdIn <= exModule.io.rdOut @[TopLevelSynthesize.scala 79:21]
    memModule.io.memControl.memSize <= exModule.io.memControl.sigBundle.memSize @[TopLevelSynthesize.scala 80:27]
    memModule.io.memControl.memToReg <= exModule.io.memControl.sigBundle.memToReg @[TopLevelSynthesize.scala 80:27]
    memModule.io.memControl.regWrite <= exModule.io.memControl.sigBundle.regWrite @[TopLevelSynthesize.scala 80:27]
    memModule.io.memControl.memWrite <= exModule.io.memControl.sigBundle.memWrite @[TopLevelSynthesize.scala 80:27]
    forwardingModule.io.rdEX <= exModule.io.rdOut @[TopLevelSynthesize.scala 83:28]
    forwardingModule.io.rdMEM <= memModule.io.rdOut @[TopLevelSynthesize.scala 84:29]
    forwardingModule.io.regWriteEX <= exModule.io.memControl.sigBundle.regWrite @[TopLevelSynthesize.scala 85:34]
    forwardingModule.io.regWriteMEM <= memModule.io.regWriteOut @[TopLevelSynthesize.scala 86:35]
    forwardingModule.io.rs1IdxEX <= exModule.io.memControl.rs1Idx @[TopLevelSynthesize.scala 87:32]
    forwardingModule.io.rs2IdxEX <= exModule.io.memControl.rs2Idx @[TopLevelSynthesize.scala 88:32]
    forwardingModule.io.rs1IdxID <= idModule.io.exControl.rs1Idx @[TopLevelSynthesize.scala 89:32]
    forwardingModule.io.rs2IdxID <= idModule.io.exControl.rs2Idx @[TopLevelSynthesize.scala 90:32]
    forwardingModule.io.exHasLoad <= exModule.io.memControl.sigBundle.memToReg @[TopLevelSynthesize.scala 91:33]
    ifModule.io.running <= runningReg @[TopLevelSynthesize.scala 101:23]
    when idModule.io.halt : @[TopLevelSynthesize.scala 103:25]
      halted <= UInt<1>("h1") @[TopLevelSynthesize.scala 104:12]
      idModule.io.instr <= UInt<5>("h13") @[TopLevelSynthesize.scala 105:23]
    io.ioLED <= memModule.io.ioWrite.ioLED @[TopLevelSynthesize.scala 109:12]
    mmUart.io.port <= memModule.io.port @[TopLevelSynthesize.scala 110:21]
    mmUart.io.pins.rx <= io.uart.rx @[TopLevelSynthesize.scala 111:11]
    io.uart.tx <= mmUart.io.pins.tx @[TopLevelSynthesize.scala 111:11]

